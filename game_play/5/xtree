#!/usr/bin/python3

import sys
sys.path.insert(0, '../Fish/Common')
from structures import Coordinate, Player, GameStatePhase, Action
from board import FishBoard
from state import FishGameState
from game_tree import GameStateTree
import json
from typing import List

def break_tie(matching_outcomes: List[Action]):
    """
    Break tie if necessary according to 5-TheStrategy
    :param matching_outcomes: a list of possible moves
    :return: the one tile that is farthest top left
    """
    best_action: Action = matching_outcomes[0]
    for possible_move in matching_outcomes[1:]:
        # if the new outcome's row is less than the previous best, update to this outcome
        if possible_move.start.row < best_action.start.row:
            best_action = possible_move
            continue
            # if they have the same row check col
        elif best_action.start.row == possible_move.start.row:
            # if the new outcome has lower col update best_action
            if possible_move.start.col < best_action.start.col:
                best_action = possible_move
                continue
                # if they have the same row and col check end
            elif possible_move.start.col == best_action.start.col:
                # if the new outcome has a lower end row update
                if possible_move.end.row < best_action.end.row:
                    best_action = possible_move
                    continue
                    # if they have the same end row and the new outcome has a lower col update
                elif possible_move.end.row == best_action.end.row and \
                        possible_move.end.col < best_action.end.col:
                    best_action = possible_move
                    continue

    return best_action

def is_adjacent_north(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.top_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.top_coordinate.row == coord_2.row and tile.top_coordinate.col == coord_2.col:
                return True
    return False

def is_adjacent_northeast(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.top_right_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.top_right_coordinate.row == coord_2.row and tile.top_right_coordinate.col == coord_2.col:
                return True
    return False

def is_adjacent_southeast(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.bottom_right_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.bottom_right_coordinate.row == coord_2.row and tile.bottom_right_coordinate.col == coord_2.col:
                return True
    return False

def is_adjacent_south(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.bottom_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.bottom_coordinate.row == coord_2.row and tile.bottom_coordinate.col == coord_2.col:
                return True
    return False

def is_adjacent_southwest(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.bottom_left_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.bottom_left_coordinate.row == coord_2.row and tile.bottom_left_coordinate.col == coord_2.col:
                return True
    return False

def is_adjacent_northwest(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.top_left_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.top_left_coordinate.row == coord_2.row and tile.top_left_coordinate.col == coord_2.col:
                return True
    return False

def is_adjacent(board: FishBoard, coord_1: Coordinate, coord_2: Coordinate):
    """
    Check if two coordinates are adjacent
    :param board: board whose tiles will be used
    :param coord_1: the start coordinate
    :param coord_2: the end coordinate
    :return: True if it is adjacent
    """
    for row, row_list in enumerate(board.board):
        for col, tile in enumerate(row_list):
            if tile.top_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.top_coordinate.row == coord_2.row and tile.top_coordinate.col == coord_2.col:
                return True
            elif tile.top_right_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.top_right_coordinate.row == coord_2.row and tile.top_right_coordinate.col == coord_2.col:
                return True
            elif tile.bottom_right_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.bottom_right_coordinate.row == coord_2.row and tile.bottom_right_coordinate.col == coord_2.col:
                return True
            elif tile.bottom_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.bottom_coordinate.row == coord_2.row and tile.bottom_coordinate.col == coord_2.col:
                return True
            elif tile.bottom_left_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.bottom_left_coordinate.row == coord_2.row and tile.bottom_left_coordinate.col == coord_2.col:
                return True
            elif tile.top_left_coordinate is not None \
                    and row == coord_1.row and col == coord_1.col and \
                    tile.top_left_coordinate.row == coord_2.row and tile.top_left_coordinate.col == coord_2.col:
                return True

    return False


def find_next_move(state:FishGameState, desired_coord: Coordinate):
    """
    Find penguin to move to neighbor of desired coord according to specification on 5--theStrategy
    :param state: state to find move
    :param desired_coord: place that must be moved next to
    :return: Coordinate that has penguin that will move to a neighbor of the desired_coord, True if move found False otherwise
    """
    tree = GameStateTree(state)
    possible_moves_north = []
    possible_moves_northeast = []
    possible_moves_southeast = []
    possible_moves_south = []
    possible_moves_southwest = []
    possible_moves_northwest = []
    for child in tree.get_children():
        # if is_adjacent_north(child.state.board, child.previous_action.end, desired_coord):
        #     possible_moves_north.append(child.previous_action)
        # elif is_adjacent_northeast(child.state.board, child.previous_action.end, desired_coord):
        #     possible_moves_northeast.append(child.previous_action)
        # elif is_adjacent_southeast(child.state.board, child.previous_action.end, desired_coord):
        #     possible_moves_southeast.append(child.previous_action)
        # elif is_adjacent_south(child.state.board, child.previous_action.end, desired_coord):
        #     possible_moves_south.append(child.previous_action)
        # elif is_adjacent_southwest(child.state.board, child.previous_action.end, desired_coord):
        #     possible_moves_southwest.append(child.previous_action)
        # elif is_adjacent_northwest(child.state.board, child.previous_action.end, desired_coord):
        #     possible_moves_northwest.append(child.previous_action)
        if is_adjacent_north(child.state.board, desired_coord, child.previous_action.end):
            possible_moves_north.append(child.previous_action)
        elif is_adjacent_northeast(child.state.board, desired_coord, child.previous_action.end):
            possible_moves_northeast.append(child.previous_action)
        elif is_adjacent_southeast(child.state.board, desired_coord, child.previous_action.end):
            possible_moves_southeast.append(child.previous_action)
        elif is_adjacent_south(child.state.board, desired_coord, child.previous_action.end):
            possible_moves_south.append(child.previous_action)
        elif is_adjacent_southwest(child.state.board, desired_coord, child.previous_action.end):
            possible_moves_southwest.append(child.previous_action)
        elif is_adjacent_northwest(child.state.board, desired_coord, child.previous_action.end):
            possible_moves_northwest.append(child.previous_action)

    best_action = None
    if len(possible_moves_north) > 0:
        if len(possible_moves_north) > 1:
            best_action = break_tie(possible_moves_north)
            return best_action, best_action is not None
        else:
            best_action = possible_moves_north[0]
            return best_action, best_action is not None
    elif len(possible_moves_northeast) > 0:
        if len(possible_moves_northeast) > 1:
            best_action = break_tie(possible_moves_northeast)
            return best_action, best_action is not None
        else:
            best_action = possible_moves_northeast[0]
            return best_action, best_action is not None
    elif len(possible_moves_southeast) > 0:
        if len(possible_moves_southeast) > 1:
            best_action = break_tie(possible_moves_southeast)
            return best_action, best_action is not None
        else:
            best_action = possible_moves_southeast[0]
            return best_action, best_action is not None
    elif len(possible_moves_south) > 0:
        if len(possible_moves_south) > 1:
            best_action = break_tie(possible_moves_south)
            return best_action, best_action is not None
        else:
            best_action = possible_moves_south[0]
            return best_action, best_action is not None
    elif len(possible_moves_southwest) > 0:
        if len(possible_moves_southwest) > 1:
            best_action = break_tie(possible_moves_southwest)
            return best_action, best_action is not None
        else:
            best_action = possible_moves_southwest[0]
            return best_action, best_action is not None
    elif len(possible_moves_northwest) > 0:
        if len(possible_moves_northwest) > 1:
            best_action = break_tie(possible_moves_northwest)
            return best_action, best_action is not None
        else:
            best_action = possible_moves_northwest[0]
            return best_action, best_action is not None

    return best_action, best_action is not None


def create_state(players, board):
    """
    Create state for given players and board
    :param players: List of Players whose penguins will be added
    :param board: 2D list representation of a board with each element representing how many fish at a specific location
    :return: the resulting state from adding the players penguins to the board
    """
    state = FishGameState(board=board, num_players=len(players), players=players, current_player=players[0], phase=GameStatePhase.FINAL)
    return state


def create_board(board):
    """
    Create model with correct size and number of fish given a json board.
    :param board: 2D list representation of a board with each element representing how many fish at a specific location
    :return: Return the FishBoard model that is constructed from the json
    """
    model = FishBoard(len(board), len(board[0]))
    for r, row in enumerate(board):
        for c, num_fish in enumerate(row):
            if num_fish == 0:
                model = model.create_hole(r, c)
            elif num_fish > 0:
                for fish in range(num_fish):
                    model = model.add_fish(r, c)

    return model


def create_players(players_json):
    """
    Create list of PLayers from json array of Players
    :param players_json: Json representation of players as defined in 4---TheGameTree
    :return: Return list of Player objects with correct Penguin placements and score
    """
    players = []
    for player in players_json:
        penguins = []
        for penguin in player['places']:
            penguins.append(Coordinate(row=penguin[0], col=penguin[1]))
        new_player = Player(color=player['color'], age=0, score=player['score'], penguins=penguins)
        players.append(new_player)

    return players


def transform(input):
    """
    Transform the stdin input into a state and move coordinates.
    :param input: String that has been read from stdin
    :return: state of the game and move coordinates
    """
    input_json = json.loads(input)
    state_json = input_json['state']
    players = create_players(state_json['players'])
    board = create_board(state_json['board'])
    state = create_state(players, board)
    from_coord = input_json['from']
    to_coord = input_json['to']
    return state, Coordinate(from_coord[0], from_coord[1]), Coordinate(to_coord[0], to_coord[1])


def retrieve_input():
    """
    Retrieve input from stdin
    :return: String that has been read from stdin
    """
    input = ""
    for line in sys.stdin:
        input += line

    return input


if __name__ == '__main__':
    input = retrieve_input()
    state, from_coord, to_coord = transform(input)
    state = state.move_penguin(color=state.current_player.color,
                               start_row=from_coord.row,
                               start_col=from_coord.col,
                               end_row=to_coord.row,
                               end_col=to_coord.col)
    result_action, found_move = find_next_move(state, to_coord)
    if found_move:
        print(json.dumps([result_action.start, result_action.end]))
    else:
        print(json.dumps(False))
