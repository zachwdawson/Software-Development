#!/usr/bin/python3

import sys
sys.path.insert(0, '../Fish/Common')

from structures import Coordinate, Player, GameStatePhase
from board import FishBoard
from state import FishGameState
import json


def serialize_state(state, found_move):
    """
    Serialize state into json dormat defined in 4---TheGameTree
    :param state: current game state
    :param found_move: Whether or not a possible move was found.
    :return: state in json form
    """

    if not found_move:
        return json.dumps(False)

    board_json_array = []
    for row, row_list in enumerate(state.board.board):
        row_json_array = []
        for col, tile in enumerate(row_list):
            row_json_array.append(state.board.retrieve_num_fish(row=row, col=col))
        board_json_array.append(row_json_array)

    counter = 0
    players_json_array = []
    current_player_color = state.current_player.color
    while counter < len(state.players.items()):
        player = state.players[current_player_color]
        player_dict = {
            'color': player.color,
            'score': player.score,
            'places': [
                [coordinate.row, coordinate.col] for coordinate in player.penguins
            ]
        }
        players_json_array.append(player_dict)
        current_player_color = state.next_player().color
        counter += 1

    state_dict = {
        "players": players_json_array,
        "board": board_json_array
    }
    return json.dumps(state_dict, indent=2)


def make_one_silly_move(state, first_player_color):
    """
    Modify state by moving the first players first_penguin in the first available direction starting at North and going clockwise
    :param state: current game state
    :param first_player_color: color of penguin to be moved
    :return: updated game state with one penguin moved
    """
    move_found = False
    move_order = [
        'top_coordinate',
        'top_right_coordinate',
        'bottom_right_coordinate',
        'bottom_coordinate',
        'bottom_left_coordinate',
        'top_left_coordinate'
    ]
    start_penguin_location = state.players[first_player_color].penguins[0]
    for direction in move_order:
        reachable_tiles = state.board.get_reachable_tile_coordinates_by_direction(
            start_tile=state.board.board[start_penguin_location.row][start_penguin_location.col],
            direction=direction,
            unreachable_tiles=[
                penguin for _, player in state.players.items() for penguin in player.penguins
            ]
        )

        if len(reachable_tiles) > 0:
            move_found = True
            state = state.move_penguin(
                color=first_player_color,
                start_row=start_penguin_location.row,
                start_col=start_penguin_location.col,
                end_row=reachable_tiles[0].row,
                end_col=reachable_tiles[0].col
            )
            break

    return state, move_found


def create_state(players, board):
    """
    Create state for given players and board
    :param players: List of Players whose penguins will be added
    :param board: 2D list representation of a board with each element representing how many fish at a specific location
    :return: the resulting state from adding the players penguins to the board
    """
    state = FishGameState(board=board, num_players=len(players), players=players, current_player=players[0], phase=GameStatePhase.FINAL)
    return state


def create_board(board):
    """
    Create model with correct size and number of fish given a json board.
    :param board: 2D list representation of a board with each element representing how many fish at a specific location
    :return: Return the FishBoard model that is constructed from the json
    """
    model = FishBoard(len(board), len(board[0]))
    for r, row in enumerate(board):
        for c, num_fish in enumerate(row):
            if num_fish == 0:
                model = model.create_hole(r, c)
            elif num_fish > 0:
                for fish in range(num_fish):
                    model = model.add_fish(r, c)

    return model


def create_players(players_json):
    """
    Create list of PLayers from json array of Players
    :param players_json: Json representation of players as defined in 4---TheGameTree
    :return: Return list of Player objects with correct Penguin placements and score
    """
    players = []
    first_player_color = players_json[0]['color']
    for player in players_json:
        penguins = []
        for penguin in player['places']:
            penguins.append(Coordinate(row=penguin[0], col=penguin[1]))
        new_player = Player(color=player['color'], age=0, score=player['score'], penguins=penguins)
        players.append(new_player)

    return players, first_player_color


def transform(input):
    """
    Transform the stdin input into a Coordinate and FishBoard models.
    :param input: String that has been read from stdin
    :return: List of Players, the color of the first penguin to decide who attempts to move later and the Board
    """

    state_json = json.loads(input)

    players, first_player_color = create_players(state_json['players'])
    board = create_board(state_json['board'])
    return players, first_player_color, board


def retrieve_input():
    """
    Retrieve input from stdin
    :return: String that has been read from stdin
    """
    input = ""
    for line in sys.stdin:
        input += line

    return input


if __name__ == '__main__':
    input = retrieve_input()
    players, first_player_color, board = transform(input)
    state = create_state(players, board)
    state, found_move = make_one_silly_move(state, first_player_color)
    print(serialize_state(state, found_move))
